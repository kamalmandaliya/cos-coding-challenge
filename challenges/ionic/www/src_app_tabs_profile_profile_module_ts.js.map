{"version":3,"file":"src_app_tabs_profile_profile_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AACV;AAE7C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,sDAAW;KACvB;CACF,CAAC;IAMW,wBAAwB,SAAxB,wBAAwB;CAAG;AAA3B,wBAAwB;IAJpC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,wBAAwB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;ACfI;AACM;AAEW;AACb;AACuB;IAMvD,iBAAiB,SAAjB,iBAAiB;CAAG;AAApB,iBAAiB;IAJ7B,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,yDAAY,EAAE,6EAAwB,EAAE,+DAAY,CAAC;QAC/D,YAAY,EAAE,CAAC,sDAAW,CAAC;KAC5B,CAAC;GACW,iBAAiB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;ACXoB;AACF;AACJ;AAEO;AAEuB;IAO7D,WAAW,SAAX,WAAW;IAQtB,YAAoB,KAAY,EAAU,cAA8B;QAApD,UAAK,GAAL,KAAK,CAAO;QAAU,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAE5E,SAAS,CAAC,KAAK;QACb,UAAU,CAAC,GAAG,EAAE;YACd,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC1B,CAAC,EAAE,GAAG,CAAC,CAAC;IACV,CAAC;IAED,UAAU;QACR,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,sEAAwB,CAAC,GAAG,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,eAAe;QACb,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC9C,CAAC;IAED,eAAe;QACb,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC;CACF;;YA1CgB,8CAAK;YADb,0DAAc;;AAaC;IAArB,mDAAM,CAAC,8DAAU,EAAE,CAAC;0CAAiC;AACnB;IAAlC,mDAAM,CAAC,2EAAuB,EAAE,CAAC;uDAI/B;AANQ,WAAW;IALvB,wDAAS,CAAC;QACT,QAAQ,EAAE,aAAa;QACvB,oEAAgC;;KAEjC,CAAC;GACW,WAAW,CA+BvB;AA/BuB;;;;;;;;;;;;;;;;;;ACbqB;AAEM;AAE5C,MAAM,UAAU,GAAG,GAAG,EAAE,CAC7B,2DAAc,CAAC,CAAC,4DAAgB,CAAC,EAAE,CAAC,KAA4B,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAExF,MAAM,uBAAuB,GAAG,GAAG,EAAE,CAC1C,2DAAc,CAAC,CAAC,4DAAgB,CAAC,EAAE,CAAC,KAA4B,EAAE,EAAE,CAAC,CAAC;IACpE,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,SAAS;IAClC,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,SAAS;IAClC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,QAAQ;CACjC,CAAC,CAAC,CAAC","sources":["./src/app/tabs/profile/profile-routing.module.ts","./src/app/tabs/profile/profile.module.ts","./src/app/tabs/profile/profile.page.ts","./src/app/tabs/profile/profile.selectors.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProfilePage } from './profile.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProfilePage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfilePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SharedModule } from '../../shared/shared.module';\nimport { ProfilePage } from './profile.page';\nimport { ProfilePageRoutingModule } from './profile-routing.module';\n\n@NgModule({\n  imports: [CommonModule, ProfilePageRoutingModule, SharedModule],\n  declarations: [ProfilePage],\n})\nexport class ProfilePageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { MenuController } from '@ionic/angular';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { ProfileActions } from './profile.actions';\nimport { ProfileModel } from './profile.model';\nimport { selectUser, selectUserLoadingStates } from './profile.selectors';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: 'profile.page.html',\n  styleUrls: ['profile.page.scss'],\n})\nexport class ProfilePage implements OnInit {\n  @Select(selectUser()) user$: Observable<ProfileModel>;\n  @Select(selectUserLoadingStates()) userLoadingStates$: Observable<{\n    isLoading: boolean;\n    isFailed: boolean;\n    isSuccess: boolean;\n  }>;\n\n  constructor(private store: Store, private menuController: MenuController) {}\n\n  doRefresh(event) {\n    setTimeout(() => {\n      event.target.complete();\n    }, 500);\n  }\n\n  toggleMenu() {\n    this.menuController.toggle('profile');\n  }\n\n  ngOnInit() {\n    this.store.dispatch(new ProfileActions.FetchUser('1'));\n  }\n\n  ionViewDidEnter() {\n    this.menuController.enable(true, 'profile');\n  }\n\n  ionViewDidLeave() {\n    this.menuController.enable(false, 'profile');\n  }\n}\n","import { createSelector } from '@ngxs/store';\nimport { ProfilePageStateModel } from './profile.model';\nimport { ProfilePageState } from './profile.state';\n\nexport const selectUser = () =>\n  createSelector([ProfilePageState], (state: ProfilePageStateModel) => state.profile.listData);\n\nexport const selectUserLoadingStates = () =>\n  createSelector([ProfilePageState], (state: ProfilePageStateModel) => ({\n    isLoading: state.profile.isLoading,\n    isSuccess: state.profile.isSuccess,\n    isFailed: state.profile.isFailed,\n  }));\n"],"names":[],"sourceRoot":"webpack:///"}