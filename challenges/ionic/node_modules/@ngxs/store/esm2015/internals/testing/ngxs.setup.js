/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµBrowserDomAdapter as BrowserDomAdapter } from '@angular/platform-browser';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { NgxsModule, Store } from '@ngxs/store';
import { NgxsTestModule } from './helpers/ngxs-test.module';
export class NgxsTestBed {
    /**
     * @param {?} options
     * @return {?}
     */
    static configureTestingStates(options) {
        this.resetTestBed();
        if (options.before) {
            options.before();
        }
        TestBed.configureTestingModule({
            imports: [
                NgxsTestModule,
                NgxsModule.forRoot(options.states || [], options.ngxsOptions || {}),
                ...(options.imports || [])
            ]
        }).compileComponents();
        NgxsTestBed.ngxsBootstrap();
        return {
            /**
             * @return {?}
             */
            get store() {
                return TestBed.inject(Store);
            },
            /**
             * @return {?}
             */
            get getTestBed() {
                return TestBed;
            }
        };
    }
    /**
     * @private
     * @return {?}
     */
    static ngxsBootstrap() {
        NgxsTestBed.createRootNode();
        NgxsTestModule.ngDoBootstrap(TestBed.inject(ApplicationRef));
    }
    /**
     * @private
     * @return {?}
     */
    static resetTestBed() {
        TestBed.resetTestEnvironment();
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    }
    /**
     * @private
     * @param {?=} selector
     * @return {?}
     */
    static createRootNode(selector = 'app-root') {
        /** @type {?} */
        const document = TestBed.inject(DOCUMENT);
        /** @type {?} */
        const adapter = new BrowserDomAdapter();
        /** @type {?} */
        const root = adapter.createElement(selector);
        document.body.appendChild(root);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy5zZXR1cC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlL2ludGVybmFscy90ZXN0aW5nLyIsInNvdXJjZXMiOlsibmd4cy5zZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsT0FBTyxFQUFpQixNQUFNLHVCQUF1QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLElBQUksaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRixPQUFPLEVBQ0wsMkJBQTJCLEVBQzNCLDZCQUE2QixFQUM5QixNQUFNLDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWhELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUc1RCxNQUFNLE9BQU8sV0FBVzs7Ozs7SUFDZixNQUFNLENBQUMsc0JBQXNCLENBQUMsT0FBMkI7UUFDOUQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBCLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNsQixPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDbEI7UUFFRCxPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFO2dCQUNQLGNBQWM7Z0JBQ2QsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRSxPQUFPLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztnQkFDbkUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO2FBQzNCO1NBQ0YsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFdkIsV0FBVyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRTVCLE9BQU87Ozs7WUFDTCxJQUFJLEtBQUs7Z0JBQ1AsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9CLENBQUM7Ozs7WUFDRCxJQUFJLFVBQVU7Z0JBQ1osT0FBTyxPQUFPLENBQUM7WUFDakIsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDOzs7OztJQUVPLE1BQU0sQ0FBQyxhQUFhO1FBQzFCLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUM3QixjQUFjLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7OztJQUVPLE1BQU0sQ0FBQyxZQUFZO1FBQ3pCLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQzs7Ozs7O0lBRU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsVUFBVTs7Y0FDM0MsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDOztjQUNuQyxPQUFPLEdBQUcsSUFBSSxpQkFBaUIsRUFBRTs7Y0FDakMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBQzVDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRlc3RCZWQsIFRlc3RCZWRTdGF0aWMgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IMm1QnJvd3NlckRvbUFkYXB0ZXIgYXMgQnJvd3NlckRvbUFkYXB0ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHtcclxuICBCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsXHJcbiAgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmdcclxufSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMvdGVzdGluZyc7XHJcbmltcG9ydCB7IE5neHNNb2R1bGUsIFN0b3JlIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5cclxuaW1wb3J0IHsgTmd4c1Rlc3RNb2R1bGUgfSBmcm9tICcuL2hlbHBlcnMvbmd4cy10ZXN0Lm1vZHVsZSc7XHJcbmltcG9ydCB7IE5neHNPcHRpb25zVGVzdGluZywgTmd4c1Rlc3RpbmcgfSBmcm9tICcuL3N5bWJvbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgTmd4c1Rlc3RCZWQge1xyXG4gIHB1YmxpYyBzdGF0aWMgY29uZmlndXJlVGVzdGluZ1N0YXRlcyhvcHRpb25zOiBOZ3hzT3B0aW9uc1Rlc3RpbmcpOiBOZ3hzVGVzdGluZyB7XHJcbiAgICB0aGlzLnJlc2V0VGVzdEJlZCgpO1xyXG5cclxuICAgIGlmIChvcHRpb25zLmJlZm9yZSkge1xyXG4gICAgICBvcHRpb25zLmJlZm9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIGltcG9ydHM6IFtcclxuICAgICAgICBOZ3hzVGVzdE1vZHVsZSxcclxuICAgICAgICBOZ3hzTW9kdWxlLmZvclJvb3Qob3B0aW9ucy5zdGF0ZXMgfHwgW10sIG9wdGlvbnMubmd4c09wdGlvbnMgfHwge30pLFxyXG4gICAgICAgIC4uLihvcHRpb25zLmltcG9ydHMgfHwgW10pXHJcbiAgICAgIF1cclxuICAgIH0pLmNvbXBpbGVDb21wb25lbnRzKCk7XHJcblxyXG4gICAgTmd4c1Rlc3RCZWQubmd4c0Jvb3RzdHJhcCgpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGdldCBzdG9yZSgpOiBTdG9yZSB7XHJcbiAgICAgICAgcmV0dXJuIFRlc3RCZWQuaW5qZWN0KFN0b3JlKTtcclxuICAgICAgfSxcclxuICAgICAgZ2V0IGdldFRlc3RCZWQoKTogVGVzdEJlZFN0YXRpYyB7XHJcbiAgICAgICAgcmV0dXJuIFRlc3RCZWQ7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBuZ3hzQm9vdHN0cmFwKCk6IHZvaWQge1xyXG4gICAgTmd4c1Rlc3RCZWQuY3JlYXRlUm9vdE5vZGUoKTtcclxuICAgIE5neHNUZXN0TW9kdWxlLm5nRG9Cb290c3RyYXAoVGVzdEJlZC5pbmplY3QoQXBwbGljYXRpb25SZWYpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHJlc2V0VGVzdEJlZCgpOiB2b2lkIHtcclxuICAgIFRlc3RCZWQucmVzZXRUZXN0RW52aXJvbm1lbnQoKTtcclxuICAgIFRlc3RCZWQuaW5pdFRlc3RFbnZpcm9ubWVudChCcm93c2VyRHluYW1pY1Rlc3RpbmdNb2R1bGUsIHBsYXRmb3JtQnJvd3NlckR5bmFtaWNUZXN0aW5nKCkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlUm9vdE5vZGUoc2VsZWN0b3IgPSAnYXBwLXJvb3QnKTogdm9pZCB7XHJcbiAgICBjb25zdCBkb2N1bWVudCA9IFRlc3RCZWQuaW5qZWN0KERPQ1VNRU5UKTtcclxuICAgIGNvbnN0IGFkYXB0ZXIgPSBuZXcgQnJvd3NlckRvbUFkYXB0ZXIoKTtcclxuICAgIGNvbnN0IHJvb3QgPSBhZGFwdGVyLmNyZWF0ZUVsZW1lbnQoc2VsZWN0b3IpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyb290KTtcclxuICB9XHJcbn1cclxuIl19