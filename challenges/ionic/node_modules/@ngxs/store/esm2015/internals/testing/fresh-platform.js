/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { destroyPlatform, createPlatform } from '@angular/core';
/**
 * @return {?}
 */
function createRootElement() {
    /** @type {?} */
    const document = TestBed.inject(DOCUMENT);
    /** @type {?} */
    const root = getDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
/**
 * @return {?}
 */
function removeRootElement() {
    /** @type {?} */
    const root = (/** @type {?} */ (document.getElementsByTagName('app-root').item(0)));
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
/**
 * @return {?}
 */
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
/**
 * @return {?}
 */
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    createPlatform(TestBed);
}
/**
 * @param {?} fn
 * @return {?}
 */
export function freshPlatform(fn) {
    return (/**
     * @this {?}
     * @param {...?} args
     * @return {?}
     */
    function testWithAFreshPlatform(...args) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                destroyPlatformBeforeBootstrappingTheNewOne();
                return yield fn.apply(this, args);
            }
            finally {
                resetPlatformAfterBootstrapping();
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlc2gtcGxhdGZvcm0uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy8iLCJzb3VyY2VzIjpbImZyZXNoLXBsYXRmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBRWhFLFNBQVMsaUJBQWlCOztVQUNsQixRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7O1VBQ25DLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQztJQUN6RCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxDQUFDOzs7O0FBRUQsU0FBUyxpQkFBaUI7O1VBQ2xCLElBQUksR0FBWSxtQkFBQSxRQUFRLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDO0lBQ3hFLElBQUk7UUFDRixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNqQztJQUFDLFdBQU0sR0FBRTtBQUNaLENBQUM7Ozs7QUFFRCxTQUFTLDJDQUEyQztJQUNsRCxlQUFlLEVBQUUsQ0FBQztJQUNsQixpQkFBaUIsRUFBRSxDQUFDO0FBQ3RCLENBQUM7Ozs7Ozs7QUFLRCxTQUFTLCtCQUErQjtJQUN0QyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMxQixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBWTtJQUN4Qzs7Ozs7SUFBTyxTQUFlLHNCQUFzQixDQUFZLEdBQUcsSUFBVzs7WUFDcEUsSUFBSTtnQkFDRiwyQ0FBMkMsRUFBRSxDQUFDO2dCQUM5QyxPQUFPLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDbkM7b0JBQVM7Z0JBQ1IsK0JBQStCLEVBQUUsQ0FBQzthQUNuQztRQUNILENBQUM7S0FBQSxFQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IMm1Z2V0RE9NIGFzIGdldERPTSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBkZXN0cm95UGxhdGZvcm0sIGNyZWF0ZVBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVSb290RWxlbWVudCgpIHtcclxuICBjb25zdCBkb2N1bWVudCA9IFRlc3RCZWQuaW5qZWN0KERPQ1VNRU5UKTtcclxuICBjb25zdCByb290ID0gZ2V0RE9NKCkuY3JlYXRlRWxlbWVudCgnYXBwLXJvb3QnLCBkb2N1bWVudCk7XHJcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyb290KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlUm9vdEVsZW1lbnQoKSB7XHJcbiAgY29uc3Qgcm9vdDogRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhcHAtcm9vdCcpLml0ZW0oMCkhO1xyXG4gIHRyeSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHJvb3QpO1xyXG4gIH0gY2F0Y2gge31cclxufVxyXG5cclxuZnVuY3Rpb24gZGVzdHJveVBsYXRmb3JtQmVmb3JlQm9vdHN0cmFwcGluZ1RoZU5ld09uZSgpIHtcclxuICBkZXN0cm95UGxhdGZvcm0oKTtcclxuICBjcmVhdGVSb290RWxlbWVudCgpO1xyXG59XHJcblxyXG4vLyBBcyB3ZSBjcmVhdGUgb3VyIGN1c3RvbSBwbGF0Zm9ybSB2aWEgYGJvb3RzdHJhcE1vZHVsZWBcclxuLy8gd2UgaGF2ZSB0byBkZXN0cm95IGl0IGFmdGVyIGFzc2V0aW9ucyBhbmQgcmV2ZXJ0XHJcbi8vIHRoZSBwcmV2aW91cyBvbmVcclxuZnVuY3Rpb24gcmVzZXRQbGF0Zm9ybUFmdGVyQm9vdHN0cmFwcGluZygpIHtcclxuICByZW1vdmVSb290RWxlbWVudCgpO1xyXG4gIGRlc3Ryb3lQbGF0Zm9ybSgpO1xyXG4gIGNyZWF0ZVBsYXRmb3JtKFRlc3RCZWQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZnJlc2hQbGF0Zm9ybShmbjogRnVuY3Rpb24pOiAoLi4uYXJnczogYW55W10pID0+IGFueSB7XHJcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIHRlc3RXaXRoQUZyZXNoUGxhdGZvcm0odGhpczogYW55LCAuLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgZGVzdHJveVBsYXRmb3JtQmVmb3JlQm9vdHN0cmFwcGluZ1RoZU5ld09uZSgpO1xyXG4gICAgICByZXR1cm4gYXdhaXQgZm4uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICByZXNldFBsYXRmb3JtQWZ0ZXJCb290c3RyYXBwaW5nKCk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iXX0=