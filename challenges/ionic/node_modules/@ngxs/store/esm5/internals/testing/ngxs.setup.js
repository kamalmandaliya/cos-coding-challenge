/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApplicationRef } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµBrowserDomAdapter as BrowserDomAdapter } from '@angular/platform-browser';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { NgxsModule, Store } from '@ngxs/store';
import { NgxsTestModule } from './helpers/ngxs-test.module';
var NgxsTestBed = /** @class */ (function () {
    function NgxsTestBed() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    NgxsTestBed.configureTestingStates = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.resetTestBed();
        if (options.before) {
            options.before();
        }
        TestBed.configureTestingModule({
            imports: tslib_1.__spread([
                NgxsTestModule,
                NgxsModule.forRoot(options.states || [], options.ngxsOptions || {})
            ], (options.imports || []))
        }).compileComponents();
        NgxsTestBed.ngxsBootstrap();
        return {
            /**
             * @return {?}
             */
            get store() {
                return TestBed.inject(Store);
            },
            /**
             * @return {?}
             */
            get getTestBed() {
                return TestBed;
            }
        };
    };
    /**
     * @private
     * @return {?}
     */
    NgxsTestBed.ngxsBootstrap = /**
     * @private
     * @return {?}
     */
    function () {
        NgxsTestBed.createRootNode();
        NgxsTestModule.ngDoBootstrap(TestBed.inject(ApplicationRef));
    };
    /**
     * @private
     * @return {?}
     */
    NgxsTestBed.resetTestBed = /**
     * @private
     * @return {?}
     */
    function () {
        TestBed.resetTestEnvironment();
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    };
    /**
     * @private
     * @param {?=} selector
     * @return {?}
     */
    NgxsTestBed.createRootNode = /**
     * @private
     * @param {?=} selector
     * @return {?}
     */
    function (selector) {
        if (selector === void 0) { selector = 'app-root'; }
        /** @type {?} */
        var document = TestBed.inject(DOCUMENT);
        /** @type {?} */
        var adapter = new BrowserDomAdapter();
        /** @type {?} */
        var root = adapter.createElement(selector);
        document.body.appendChild(root);
    };
    return NgxsTestBed;
}());
export { NgxsTestBed };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy5zZXR1cC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlL2ludGVybmFscy90ZXN0aW5nLyIsInNvdXJjZXMiOlsibmd4cy5zZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFFLE9BQU8sRUFBaUIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixJQUFJLGlCQUFpQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEYsT0FBTyxFQUNMLDJCQUEyQixFQUMzQiw2QkFBNkIsRUFDOUIsTUFBTSwyQ0FBMkMsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHNUQ7SUFBQTtJQTRDQSxDQUFDOzs7OztJQTNDZSxrQ0FBc0I7Ozs7SUFBcEMsVUFBcUMsT0FBMkI7UUFDOUQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBCLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNsQixPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDbEI7UUFFRCxPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTztnQkFDTCxjQUFjO2dCQUNkLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQUUsT0FBTyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7ZUFDaEUsQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUMzQjtTQUNGLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRXZCLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUU1QixPQUFPOzs7O1lBQ0wsSUFBSSxLQUFLO2dCQUNQLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixDQUFDOzs7O1lBQ0QsSUFBSSxVQUFVO2dCQUNaLE9BQU8sT0FBTyxDQUFDO1lBQ2pCLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFYyx5QkFBYTs7OztJQUE1QjtRQUNFLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUM3QixjQUFjLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7OztJQUVjLHdCQUFZOzs7O0lBQTNCO1FBQ0UsT0FBTyxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDL0IsT0FBTyxDQUFDLG1CQUFtQixDQUFDLDJCQUEyQixFQUFFLDZCQUE2QixFQUFFLENBQUMsQ0FBQztJQUM1RixDQUFDOzs7Ozs7SUFFYywwQkFBYzs7Ozs7SUFBN0IsVUFBOEIsUUFBcUI7UUFBckIseUJBQUEsRUFBQSxxQkFBcUI7O1lBQzNDLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQzs7WUFDbkMsT0FBTyxHQUFHLElBQUksaUJBQWlCLEVBQUU7O1lBQ2pDLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUM1QyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBNUNELElBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwbGljYXRpb25SZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVGVzdEJlZCwgVGVzdEJlZFN0YXRpYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgybVCcm93c2VyRG9tQWRhcHRlciBhcyBCcm93c2VyRG9tQWRhcHRlciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQge1xyXG4gIEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSxcclxuICBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljVGVzdGluZ1xyXG59IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYy90ZXN0aW5nJztcclxuaW1wb3J0IHsgTmd4c01vZHVsZSwgU3RvcmUgfSBmcm9tICdAbmd4cy9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBOZ3hzVGVzdE1vZHVsZSB9IGZyb20gJy4vaGVscGVycy9uZ3hzLXRlc3QubW9kdWxlJztcclxuaW1wb3J0IHsgTmd4c09wdGlvbnNUZXN0aW5nLCBOZ3hzVGVzdGluZyB9IGZyb20gJy4vc3ltYm9sJztcclxuXHJcbmV4cG9ydCBjbGFzcyBOZ3hzVGVzdEJlZCB7XHJcbiAgcHVibGljIHN0YXRpYyBjb25maWd1cmVUZXN0aW5nU3RhdGVzKG9wdGlvbnM6IE5neHNPcHRpb25zVGVzdGluZyk6IE5neHNUZXN0aW5nIHtcclxuICAgIHRoaXMucmVzZXRUZXN0QmVkKCk7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuYmVmb3JlKSB7XHJcbiAgICAgIG9wdGlvbnMuYmVmb3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcclxuICAgICAgaW1wb3J0czogW1xyXG4gICAgICAgIE5neHNUZXN0TW9kdWxlLFxyXG4gICAgICAgIE5neHNNb2R1bGUuZm9yUm9vdChvcHRpb25zLnN0YXRlcyB8fCBbXSwgb3B0aW9ucy5uZ3hzT3B0aW9ucyB8fCB7fSksXHJcbiAgICAgICAgLi4uKG9wdGlvbnMuaW1wb3J0cyB8fCBbXSlcclxuICAgICAgXVxyXG4gICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcclxuXHJcbiAgICBOZ3hzVGVzdEJlZC5uZ3hzQm9vdHN0cmFwKCk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZ2V0IHN0b3JlKCk6IFN0b3JlIHtcclxuICAgICAgICByZXR1cm4gVGVzdEJlZC5pbmplY3QoU3RvcmUpO1xyXG4gICAgICB9LFxyXG4gICAgICBnZXQgZ2V0VGVzdEJlZCgpOiBUZXN0QmVkU3RhdGljIHtcclxuICAgICAgICByZXR1cm4gVGVzdEJlZDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIG5neHNCb290c3RyYXAoKTogdm9pZCB7XHJcbiAgICBOZ3hzVGVzdEJlZC5jcmVhdGVSb290Tm9kZSgpO1xyXG4gICAgTmd4c1Rlc3RNb2R1bGUubmdEb0Jvb3RzdHJhcChUZXN0QmVkLmluamVjdChBcHBsaWNhdGlvblJlZikpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVzZXRUZXN0QmVkKCk6IHZvaWQge1xyXG4gICAgVGVzdEJlZC5yZXNldFRlc3RFbnZpcm9ubWVudCgpO1xyXG4gICAgVGVzdEJlZC5pbml0VGVzdEVudmlyb25tZW50KEJyb3dzZXJEeW5hbWljVGVzdGluZ01vZHVsZSwgcGxhdGZvcm1Ccm93c2VyRHluYW1pY1Rlc3RpbmcoKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVSb290Tm9kZShzZWxlY3RvciA9ICdhcHAtcm9vdCcpOiB2b2lkIHtcclxuICAgIGNvbnN0IGRvY3VtZW50ID0gVGVzdEJlZC5pbmplY3QoRE9DVU1FTlQpO1xyXG4gICAgY29uc3QgYWRhcHRlciA9IG5ldyBCcm93c2VyRG9tQWRhcHRlcigpO1xyXG4gICAgY29uc3Qgcm9vdCA9IGFkYXB0ZXIuY3JlYXRlRWxlbWVudChzZWxlY3Rvcik7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJvb3QpO1xyXG4gIH1cclxufVxyXG4iXX0=