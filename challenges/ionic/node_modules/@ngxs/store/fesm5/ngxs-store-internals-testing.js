import { __spread, __awaiter, __generator } from 'tslib';
import { Component, NgModule, ApplicationRef, destroyPlatform, createPlatform } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { BrowserModule, ɵBrowserDomAdapter, ɵgetDOM } from '@angular/platform-browser';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { NgxsModule, Store } from '@ngxs/store';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsTestComponent = /** @class */ (function () {
    function NgxsTestComponent() {
    }
    /**
     * @return {?}
     */
    NgxsTestComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    NgxsTestComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    NgxsTestComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-root',
                    template: ''
                }] }
    ];
    return NgxsTestComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsTestModule = /** @class */ (function () {
    function NgxsTestModule() {
    }
    /**
     * @param {?} app
     * @return {?}
     */
    NgxsTestModule.ngDoBootstrap = /**
     * @param {?} app
     * @return {?}
     */
    function (app) {
        app.bootstrap(NgxsTestComponent);
    };
    NgxsTestModule.decorators = [
        { type: NgModule, args: [{
                    imports: [BrowserModule],
                    declarations: [NgxsTestComponent],
                    entryComponents: [NgxsTestComponent]
                },] }
    ];
    return NgxsTestModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsTestBed = /** @class */ (function () {
    function NgxsTestBed() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    NgxsTestBed.configureTestingStates = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.resetTestBed();
        if (options.before) {
            options.before();
        }
        TestBed.configureTestingModule({
            imports: __spread([
                NgxsTestModule,
                NgxsModule.forRoot(options.states || [], options.ngxsOptions || {})
            ], (options.imports || []))
        }).compileComponents();
        NgxsTestBed.ngxsBootstrap();
        return {
            /**
             * @return {?}
             */
            get store() {
                return TestBed.inject(Store);
            },
            /**
             * @return {?}
             */
            get getTestBed() {
                return TestBed;
            }
        };
    };
    /**
     * @private
     * @return {?}
     */
    NgxsTestBed.ngxsBootstrap = /**
     * @private
     * @return {?}
     */
    function () {
        NgxsTestBed.createRootNode();
        NgxsTestModule.ngDoBootstrap(TestBed.inject(ApplicationRef));
    };
    /**
     * @private
     * @return {?}
     */
    NgxsTestBed.resetTestBed = /**
     * @private
     * @return {?}
     */
    function () {
        TestBed.resetTestEnvironment();
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    };
    /**
     * @private
     * @param {?=} selector
     * @return {?}
     */
    NgxsTestBed.createRootNode = /**
     * @private
     * @param {?=} selector
     * @return {?}
     */
    function (selector) {
        if (selector === void 0) { selector = 'app-root'; }
        /** @type {?} */
        var document = TestBed.inject(DOCUMENT);
        /** @type {?} */
        var adapter = new ɵBrowserDomAdapter();
        /** @type {?} */
        var root = adapter.createElement(selector);
        document.body.appendChild(root);
    };
    return NgxsTestBed;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function createRootElement() {
    /** @type {?} */
    var document = TestBed.inject(DOCUMENT);
    /** @type {?} */
    var root = ɵgetDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
/**
 * @return {?}
 */
function removeRootElement() {
    /** @type {?} */
    var root = (/** @type {?} */ (document.getElementsByTagName('app-root').item(0)));
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
/**
 * @return {?}
 */
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
/**
 * @return {?}
 */
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    createPlatform(TestBed);
}
/**
 * @param {?} fn
 * @return {?}
 */
function freshPlatform(fn) {
    return (/**
     * @this {?}
     * @param {...?} args
     * @return {?}
     */
    function testWithAFreshPlatform() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        destroyPlatformBeforeBootstrappingTheNewOne();
                        return [4 /*yield*/, fn.apply(this, args)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        resetPlatformAfterBootstrapping();
                        return [7 /*endfinally*/];
                    case 3: return [2 /*return*/];
                }
            });
        });
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxsTestBed, freshPlatform };
//# sourceMappingURL=ngxs-store-internals-testing.js.map
